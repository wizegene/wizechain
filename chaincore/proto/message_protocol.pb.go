// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_protocol.proto

package wire

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProtocolMessage struct {
	Header               *MessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProtocolMessage) Reset()         { *m = ProtocolMessage{} }
func (m *ProtocolMessage) String() string { return proto.CompactTextString(m) }
func (*ProtocolMessage) ProtoMessage()    {}
func (*ProtocolMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ea481b5260257b, []int{0}
}
func (m *ProtocolMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolMessage.Merge(m, src)
}
func (m *ProtocolMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolMessage proto.InternalMessageInfo

func (m *ProtocolMessage) GetHeader() *MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (*ProtocolMessage) XXX_MessageName() string {
	return "wire.ProtocolMessage"
}

type MessageHeader struct {
	Magic                []byte   `protobuf:"bytes,1,opt,name=magic,proto3" json:"magic,omitempty"`
	Command              string   `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Length               uint32   `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Checksum             []byte   `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageHeader) Reset()         { *m = MessageHeader{} }
func (m *MessageHeader) String() string { return proto.CompactTextString(m) }
func (*MessageHeader) ProtoMessage()    {}
func (*MessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ea481b5260257b, []int{1}
}
func (m *MessageHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHeader.Merge(m, src)
}
func (m *MessageHeader) XXX_Size() int {
	return m.Size()
}
func (m *MessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHeader proto.InternalMessageInfo

func (m *MessageHeader) GetMagic() []byte {
	if m != nil {
		return m.Magic
	}
	return nil
}

func (m *MessageHeader) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *MessageHeader) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *MessageHeader) GetChecksum() []byte {
	if m != nil {
		return m.Checksum
	}
	return nil
}

func (*MessageHeader) XXX_MessageName() string {
	return "wire.MessageHeader"
}
func init() {
	proto.RegisterType((*ProtocolMessage)(nil), "wire.ProtocolMessage")
	golang_proto.RegisterType((*ProtocolMessage)(nil), "wire.ProtocolMessage")
	proto.RegisterType((*MessageHeader)(nil), "wire.MessageHeader")
	golang_proto.RegisterType((*MessageHeader)(nil), "wire.MessageHeader")
}

func init() { proto.RegisterFile("message_protocol.proto", fileDescriptor_d5ea481b5260257b) }
func init() { golang_proto.RegisterFile("message_protocol.proto", fileDescriptor_d5ea481b5260257b) }

var fileDescriptor_d5ea481b5260257b = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xd9, 0x7e, 0xfd, 0xa2, 0x6e, 0x2d, 0x42, 0xd4, 0x12, 0xaa, 0xa4, 0xa1, 0xa7, 0x82,
	0x34, 0x81, 0x0a, 0x9e, 0xc4, 0x43, 0x41, 0xf0, 0x22, 0x48, 0x3d, 0x78, 0x2c, 0xdb, 0x64, 0xba,
	0x59, 0x9a, 0xcd, 0x96, 0x64, 0x63, 0xf1, 0xea, 0x2b, 0xf8, 0x42, 0x1e, 0x7b, 0xf4, 0x0d, 0x94,
	0xf4, 0x45, 0x24, 0x9b, 0x6d, 0xb4, 0x39, 0x7a, 0x9b, 0x99, 0xdf, 0x6f, 0x48, 0xe6, 0xbf, 0xb8,
	0xc3, 0x21, 0x4d, 0x09, 0x85, 0xe9, 0x32, 0x11, 0x52, 0xf8, 0x22, 0x72, 0x55, 0x61, 0x36, 0x57,
	0x2c, 0x81, 0xee, 0x15, 0x65, 0x32, 0xcc, 0x66, 0xae, 0x2f, 0xb8, 0xc7, 0x57, 0x4c, 0x2e, 0xc4,
	0xca, 0xa3, 0x62, 0xa8, 0x94, 0xe1, 0x33, 0x89, 0x58, 0x40, 0xa4, 0x48, 0x52, 0xaf, 0x2a, 0xcb,
	0xed, 0xee, 0x19, 0x15, 0x82, 0x46, 0xe0, 0xa9, 0x6e, 0x96, 0xcd, 0x3d, 0xe0, 0x4b, 0xf9, 0xa2,
	0x61, 0xaf, 0x0e, 0x25, 0xe3, 0x90, 0x4a, 0xc2, 0x97, 0x5a, 0xb0, 0xeb, 0x42, 0x90, 0x25, 0x44,
	0x32, 0x11, 0x6b, 0xee, 0xd4, 0xf9, 0x9c, 0x41, 0x14, 0x4c, 0x39, 0x49, 0x17, 0xda, 0x18, 0xfe,
	0xfa, 0x6f, 0x2a, 0xa8, 0xf8, 0x51, 0x8b, 0x4e, 0x35, 0xaa, 0x2a, 0xf5, 0xfe, 0x0d, 0x3e, 0x7a,
	0xd0, 0xe7, 0xdf, 0x97, 0x71, 0x98, 0x17, 0xd8, 0x08, 0x81, 0x04, 0x90, 0x58, 0xc8, 0x41, 0x83,
	0xd6, 0xe8, 0xd8, 0x2d, 0x02, 0x71, 0x35, 0xbe, 0x53, 0x68, 0xa2, 0x95, 0xfe, 0x1b, 0xc2, 0xed,
	0x1d, 0x62, 0x9e, 0xe3, 0xff, 0x9c, 0x50, 0xe6, 0xab, 0xed, 0xc3, 0xb1, 0x91, 0x7f, 0xf6, 0x1a,
	0x0e, 0x9a, 0x94, 0x43, 0xd3, 0xc1, 0x7b, 0xbe, 0xe0, 0x9c, 0xc4, 0x81, 0xd5, 0x70, 0xd0, 0xe0,
	0xa0, 0xe2, 0xdb, 0xb1, 0x69, 0x63, 0x23, 0x82, 0x98, 0xca, 0xd0, 0xfa, 0xe7, 0xa0, 0x41, 0xbb,
	0x12, 0xf4, 0xd4, 0xec, 0xe3, 0x7d, 0x3f, 0x04, 0x7f, 0x91, 0x66, 0xdc, 0x6a, 0xee, 0x7c, 0xa2,
	0x9a, 0x8f, 0x5e, 0x11, 0x6e, 0x3e, 0xb1, 0x04, 0xcc, 0x6b, 0xdc, 0x7a, 0x84, 0x38, 0xd8, 0x9e,
	0x76, 0x5a, 0x9e, 0x52, 0xbb, 0xb8, 0xdb, 0x71, 0xcb, 0x58, 0xdd, 0x6d, 0x56, 0xee, 0x6d, 0xf1,
	0x68, 0xc5, 0xf6, 0x04, 0xc8, 0x1f, 0xb7, 0xc7, 0x27, 0xeb, 0xdc, 0x46, 0x1f, 0xb9, 0x8d, 0xbe,
	0x72, 0x1b, 0xbd, 0x6f, 0x6c, 0xb4, 0xde, 0xd8, 0x68, 0x66, 0x28, 0xeb, 0xf2, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x28, 0x11, 0x37, 0x25, 0x7e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WireClient is the client API for Wire service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WireClient interface {
	SendMessage(ctx context.Context, in *ProtocolMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadMessage(ctx context.Context, in *ProtocolMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type wireClient struct {
	cc *grpc.ClientConn
}

func NewWireClient(cc *grpc.ClientConn) WireClient {
	return &wireClient{cc}
}

func (c *wireClient) SendMessage(ctx context.Context, in *ProtocolMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/wire.Wire/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireClient) ReadMessage(ctx context.Context, in *ProtocolMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/wire.Wire/ReadMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireServer is the server API for Wire service.
type WireServer interface {
	SendMessage(context.Context, *ProtocolMessage) (*emptypb.Empty, error)
	ReadMessage(context.Context, *ProtocolMessage) (*emptypb.Empty, error)
}

// UnimplementedWireServer can be embedded to have forward compatible implementations.
type UnimplementedWireServer struct {
}

func (*UnimplementedWireServer) SendMessage(ctx context.Context, req *ProtocolMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedWireServer) ReadMessage(ctx context.Context, req *ProtocolMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessage not implemented")
}

func RegisterWireServer(s *grpc.Server, srv WireServer) {
	s.RegisterService(&_Wire_serviceDesc, srv)
}

func _Wire_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wire.Wire/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServer).SendMessage(ctx, req.(*ProtocolMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wire_ReadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServer).ReadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wire.Wire/ReadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServer).ReadMessage(ctx, req.(*ProtocolMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wire_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wire.Wire",
	HandlerType: (*WireServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Wire_SendMessage_Handler,
		},
		{
			MethodName: "ReadMessage",
			Handler:    _Wire_ReadMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message_protocol.proto",
}

func (m *ProtocolMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessageProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintMessageProtocol(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x22
	}
	if m.Length != 0 {
		i = encodeVarintMessageProtocol(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintMessageProtocol(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Magic) > 0 {
		i -= len(m.Magic)
		copy(dAtA[i:], m.Magic)
		i = encodeVarintMessageProtocol(dAtA, i, uint64(len(m.Magic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtocolMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMessageProtocol(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Magic)
	if l > 0 {
		n += 1 + l + sovMessageProtocol(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovMessageProtocol(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovMessageProtocol(uint64(m.Length))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovMessageProtocol(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessageProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageProtocol(x uint64) (n int) {
	return sovMessageProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtocolMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &MessageHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Magic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Magic = append(m.Magic[:0], dAtA[iNdEx:postIndex]...)
			if m.Magic == nil {
				m.Magic = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageProtocol = fmt.Errorf("proto: unexpected end of group")
)
