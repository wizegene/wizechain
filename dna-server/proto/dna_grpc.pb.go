// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dna_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DnaGeneratorServiceClient is the client API for DnaGeneratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnaGeneratorServiceClient interface {
	GetDNA(ctx context.Context, in *DNARequest, opts ...grpc.CallOption) (*DNAResponse, error)
	ValidateDNA(ctx context.Context, in *ValidateDNARequest, opts ...grpc.CallOption) (*ValidateDNAResponse, error)
}

type dnaGeneratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDnaGeneratorServiceClient(cc grpc.ClientConnInterface) DnaGeneratorServiceClient {
	return &dnaGeneratorServiceClient{cc}
}

func (c *dnaGeneratorServiceClient) GetDNA(ctx context.Context, in *DNARequest, opts ...grpc.CallOption) (*DNAResponse, error) {
	out := new(DNAResponse)
	err := c.cc.Invoke(ctx, "/DnaGeneratorService/GetDNA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnaGeneratorServiceClient) ValidateDNA(ctx context.Context, in *ValidateDNARequest, opts ...grpc.CallOption) (*ValidateDNAResponse, error) {
	out := new(ValidateDNAResponse)
	err := c.cc.Invoke(ctx, "/DnaGeneratorService/ValidateDNA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnaGeneratorServiceServer is the server API for DnaGeneratorService service.
// All implementations must embed UnimplementedDnaGeneratorServiceServer
// for forward compatibility
type DnaGeneratorServiceServer interface {
	GetDNA(context.Context, *DNARequest) (*DNAResponse, error)
	ValidateDNA(context.Context, *ValidateDNARequest) (*ValidateDNAResponse, error)
	mustEmbedUnimplementedDnaGeneratorServiceServer()
}

// UnimplementedDnaGeneratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDnaGeneratorServiceServer struct {
}

func (UnimplementedDnaGeneratorServiceServer) GetDNA(context.Context, *DNARequest) (*DNAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNA not implemented")
}
func (UnimplementedDnaGeneratorServiceServer) ValidateDNA(context.Context, *ValidateDNARequest) (*ValidateDNAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDNA not implemented")
}
func (UnimplementedDnaGeneratorServiceServer) mustEmbedUnimplementedDnaGeneratorServiceServer() {}

// UnsafeDnaGeneratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnaGeneratorServiceServer will
// result in compilation errors.
type UnsafeDnaGeneratorServiceServer interface {
	mustEmbedUnimplementedDnaGeneratorServiceServer()
}

func RegisterDnaGeneratorServiceServer(s grpc.ServiceRegistrar, srv DnaGeneratorServiceServer) {
	s.RegisterService(&DnaGeneratorService_ServiceDesc, srv)
}

func _DnaGeneratorService_GetDNA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnaGeneratorServiceServer).GetDNA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DnaGeneratorService/GetDNA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnaGeneratorServiceServer).GetDNA(ctx, req.(*DNARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnaGeneratorService_ValidateDNA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDNARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnaGeneratorServiceServer).ValidateDNA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DnaGeneratorService/ValidateDNA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnaGeneratorServiceServer).ValidateDNA(ctx, req.(*ValidateDNARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DnaGeneratorService_ServiceDesc is the grpc.ServiceDesc for DnaGeneratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnaGeneratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DnaGeneratorService",
	HandlerType: (*DnaGeneratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDNA",
			Handler:    _DnaGeneratorService_GetDNA_Handler,
		},
		{
			MethodName: "ValidateDNA",
			Handler:    _DnaGeneratorService_ValidateDNA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dna.proto",
}
